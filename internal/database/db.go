// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createChirpStmt, err = db.PrepareContext(ctx, createChirp); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChirp: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAllUsersStmt, err = db.PrepareContext(ctx, deleteAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllUsers: %w", err)
	}
	if q.getChirpStmt, err = db.PrepareContext(ctx, getChirp); err != nil {
		return nil, fmt.Errorf("error preparing query GetChirp: %w", err)
	}
	if q.getChirpsStmt, err = db.PrepareContext(ctx, getChirps); err != nil {
		return nil, fmt.Errorf("error preparing query GetChirps: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createChirpStmt != nil {
		if cerr := q.createChirpStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChirpStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAllUsersStmt != nil {
		if cerr := q.deleteAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllUsersStmt: %w", cerr)
		}
	}
	if q.getChirpStmt != nil {
		if cerr := q.getChirpStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChirpStmt: %w", cerr)
		}
	}
	if q.getChirpsStmt != nil {
		if cerr := q.getChirpsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChirpsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createChirpStmt    *sql.Stmt
	createUserStmt     *sql.Stmt
	deleteAllUsersStmt *sql.Stmt
	getChirpStmt       *sql.Stmt
	getChirpsStmt      *sql.Stmt
	getUserStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createChirpStmt:    q.createChirpStmt,
		createUserStmt:     q.createUserStmt,
		deleteAllUsersStmt: q.deleteAllUsersStmt,
		getChirpStmt:       q.getChirpStmt,
		getChirpsStmt:      q.getChirpsStmt,
		getUserStmt:        q.getUserStmt,
	}
}
